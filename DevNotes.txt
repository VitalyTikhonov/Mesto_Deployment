СПРИНТ 13 – Рекомендации ревьюэра
  ИСПРАВЛЕНО:
    === Корректным считается запуск сервиса после подключения основных мидлвар. Сейчас же они "навешиваются" после того как мы вызовем listen
    === Переносы строки можно зафиксировать например на уровне конфигурации git при помощи autoCRLF в .gitattributes для избежания подобных проблем.
    === Указать описание проекта в поле description файла package.json
    === Указать автора работы (т.е вас) в поле author файла package.json.
    === Пакеты eslint-config-airbnb-base, eslint-plugin-import, nodemon относятся к devDependencies поскольку их наличие не требуется для непосредственного
      запуска проекта в production.
    ===  В случае если в метод удаления карточки \ простановки или снятия лайка \ запроса пользователя по ID передан некорректный по форме ID сервис возвращает
      не слишком информативную ошибку со статус-кодом 500, вместо более подходящей 400й (фактически это ошибка валидации). Для этого в .catch-блоке
      достаточно обрабатывать ошибку с именем CastError.
      ---СТУДЕНТ: Проверил. Странно: метод удаления карточки работал корректно, вероятно, ревьюэр перепутал его с соседними, метод запроса пользователя
          по айди тоже работал корректно (http://SSMaker.ru/63b3e234/, http://SSMaker.ru/e86cd0c5/). В методах простановки и снятия лайка ошибку
          исправил (добавил проверку валидности идентификатора карточки).

СПРИНТ 14
  Ход работы
    ГОТОВО  1. Добавьте email и password к схеме пользователя
    ГОТОВО  2. Переработайте контроллер createUser
    ГОТОВО  3. Создайте контроллер login
    ГОТОВО  4. Создайте роут для логина и регистрации
    ГОТОВО  5. Сделайте мидлвэр для авторизации
    ГОТОВО  6. Защитите API авторизацией
    ГОТОВО  7. Удалите хардкод
    ГОТОВО  8. Проконтролируйте права
                Насколько я понимаю, в req.user._id теперь попадает только свой айди, значит ничего дополнительно делать не нужно, чтобы можно было
                редактировать только свой профиль/аватар. Если функция "Редактировать" окажется доступна не в своем профиле, то это проблема фронтенда,
                данные все равно пойдут либо в свой, либо никуда - сервер выдаст ошибку.
    ГОТОВО  9. Сделайте так, чтобы API не возвращал хеш пароля
    ГОТОВО  По поводу проверки на минимальную длину пароля.
              Владислав: Надо писать дополнительную проверку. Из-за хеширования паролей ограничения в модели не имеет смысла и можно его там не делать (я про minlength)
              Перед тем как делать операцию bcrypt.hash(password, 10)   можно проверять 1) во-первых что пароль вообще передан и там не undefined,
              2) а во-вторых валидировать его по длине
    ГОТОВО  Срок жизни токена
    ГОТОВО, кажется...  Записывать токен в куку, а не запрос
    ПРОВЕРЕНО Если присланы неправильные почта и пароль, контроллер должен вернуть ошибку 401.
    ПРОВЕРЕНО Если токен просрочен?
    ПРОВЕРЕНО Проверить по чеклисту
  По рекомендациям ревьюэра
    Нужно исправить
      ИСПРАВИЛ = Возможно зарегистрировать пользователя с паролем состоящий только из пробелов.
      ИСПРАВИЛ = Код вернул "password": "$2a$10$dsrTmlbHD7Z0jO4t.CYmCe829tf1C59vvIzhOz.J/6BGxTtP06bTa" при регистрации. API не должен возвращать хеш пароля.
                 Хеш должен быть приватным.
      ИСПРАВИЛ = В случае повторной регистрации email на тот же адрес необходимо возвращать ошибку со статус-кодом 409 (Conflict) вместо 400й. Можно отловить
                 ошибку при помощи значений err.name = MongoError и err.code = 11000.
      ИСПРАВИЛ = При попытке удалить чужую карточку должна возвращаться ошибка со статусом 403.
    Можно лучше
      ИСПРАВИЛ = Секретный ключ для выпуска jwt токена и для верификации жестко прописан в разных местах кода (key), а не реквайрится из одного места; Лучше
                 брать секретный ключ из env переменных или конфиг файла.
      ИСПРАВИЛ = Назвать контроллеры и роуты без приставок. Например, ctCards лучше назвать cards. Думаю что вы усложняете добавляя приставку. Другим
                 разработчикам будет сложнее понять код.
      ИСПРАВИЛ = Рекомендую использовать https://www.npmjs.com/package/express-rate-limit для ограничения кол-во запросов. Для защиты от DoS-атак. Рекомендую
                 почитать и посмотреть видео на ютуб про DoS-атаки.
      ПОСМОТРЕЛ = Про хеширование данные. Очень рекомендую посмотреть это видео https://www.youtube.com/watch?v=b4b8ktEV4Bg.

СПРИНТ 15
  (ход работы не записывал)
  ПРИМЕЧАНИЯ К ПРОЕКТУ 15 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    В прошлых спринтах я делал эксперименты по унификации кода без учета того, как позже будет реализована централизованная отправка ошибок. В результате
    код получился довольно сложным. В этом спринте я постарался упростить его. Но, видимо, в этом направлении еще есть куда двигаться.
    Остается неясным, каков не то что оптимальный, но хотя бы необходимый набор проверок (какие должны быть уровни и что именно на каком из них должно
    проверяться). Сначала я вложил немало усилий в рефакторинг проверок в контроллерах, т. к. иначе там бы оставался хаос. Потом реализовал проверку
    запросов (Joi). Вероятно, после этого имеет смысл проанализировать проверки контроллеров и отказаться от части, если не от всех? Но погружаться в этом
    представляется опасным, пора сдавать проект.
    Остается непонятным, как сделать именно единую логику идентификации ошибок. Согласно инструкциям в тренажере мы сделали лишь их единую отправку. Я имею
    в виду if (instanceof) и т. п. Очевидно, именно ревьюэр имел в виду именно это, посоветовав мне "реализовать общий .catch-блок, который навешивать при
    помощи обертки на переданную функцию". Но я не успеваю до первой проверки над этим как следует поработать.
    С некоторым ошибками понятно, они уже проверяются так, просто на местах возникновения, а не в едином catch. Но часть ошибок не проверяются, на месте
    возникновения просто сразу генерируется инстанс ошибки,
    потому что подразумевается, что другие там возникнуть не могут. Как в общем блоке catch быть с такими?
    И возникают сомнения, будут ли ошшибки передаваться "вниз" из некоторых вложенных блоков кода в вышестоящие.

ЗАДАЧИ ПО КОММЕНТАРИЯМ РЕВЬЮЭРОВ:
  ИСПРАВИЛ
    ===  isUserExistent - с точки зрения логики может быть оформлена в виде мидлвары, тогда код самого контроллера станет легче.
    isObjectIdValid - также может быть реализован в виде мидлвары либо при помощи вынесения обработчика CastError в .catch-блок.
    Тем самым мы делаем контроллер чище.
    -- Реализовал проверку в auth.

  ИСПРАВИЛ
    ===  Использование "захардкоженных" статус-кодов в блоке .catch является плохой практикой поскольку может маскировать реальную проблему (код определяется
    вне зависимости от типа выброшенной ошибки), а также делает в ряде случаев статус-коды нерелеватными. Для решения данной проблемы рекомендую проверять
    тип ошибки при помощи поля name или с использованием конструкции instanceof

  УЧЕСТЬ В БУДУЩИХ ПРОЕКТАХ
    === Реализовать общий .catch-блок, который навешивать при помощи обертки на переданную функцию.

  УЧЕСТЬ В БУДУЩИХ ПРОЕКТАХ
    === Теперь по коду который размещен у вас в helpers - указанные вами ошибки могут быть указаны в качестве второго параметра валидации на уровне
    схемы Mongoose тогда у вас отпадет необходимость итерироваться по объекту с ошибками и соотносить ошибку определенного поля со словарем -
    достаточно будет для ошибок валидации возвращать просто err.message, соответственно также отпадает необходимость в тяжеловестном joinErrorMessages.
    Глубого его не анализировал (ибо в целом можно его исключить см выше), но на первый взгляд можно упростить его флоу если использовать метод filter :)
    -- Объект ошибок остается до сих пор. Нахожу удобным, что все тексты ошибок редактируются в одном файле, а не разложены по классам ошибок.

  УЧЕСТЬ В БУДУЩИХ ПРОЕКТАХ
    ===  orFail – работает с другими методами update-группы, которые можно использовать вместо findOneAndUpdate.

  УЧЕСТЬ В БУДУЩИХ ПРОЕКТАХ
    ===  В случае когда ваш код состоит из последовательности асинхронных вызовов в ряде случаев удобно использовать синтаксис async\await позволяющий
    писать асинхронный код в псевдосинхронном стиле.
    === Почитать и посмотреть видео на ютуб про DoS-атаки.

ПРОЧИЕ ЗАДАЧИ:
  === Переделать валидацию паролей на password-validator

=========== ЗАМЕТКИ ===============
    Если фронтенд и бэкенд работают на разных доменах, например фронтенд мы разместили на Github Pages, а бэкенд ещё где-то, то в fetch
    нужно включить опцию credentials:
      fetch('/posts', {
          method: 'GET',
          credentials: 'include', // теперь куки посылаются вместе с запросом
      });
    И браузер пошлёт куки в специальном заголовке Cookie.
=========== ПОЛЕЗНЫЙ КОД ===========
  console.log('err\n', err);
  node -e "console.log(require('crypto').randomBytes(32).toString('hex'));"

  // let action = req.method === 'PUT' ? '$addToSet' : '$pull';
  // action = req.method === 'DELETE' ? '$pull' : '$addToSet';

  // let action;
  // if (req.method === 'PUT') {
  //   action = '$addToSet';
  // } else if (req.method === 'DELETE') {
  //   action = '$pull';
  // }

  let action;
  switch (req.method) {
    case 'PUT':
      action = '$addToSet';
      break;
    case 'DELETE':
      action = '$pull';
      break;
    default:
  }
